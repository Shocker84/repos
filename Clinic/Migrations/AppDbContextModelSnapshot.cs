// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Clinic.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "6.0.0-preview.5.21301.9");

            modelBuilder.Entity("Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Gandalf"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sauroman"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Radagast"
                        });
                });

            modelBuilder.Entity("IntakeForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Ailment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("IntakeForms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ailment = "Extreme weight loss, irritability",
                            DoctorId = 2,
                            PatientId = 1
                        },
                        new
                        {
                            Id = 2,
                            Ailment = "Unable to enjoy gardening",
                            DoctorId = 1,
                            PatientId = 2
                        },
                        new
                        {
                            Id = 3,
                            Ailment = "Loneliness",
                            DoctorId = 3,
                            PatientId = 3
                        });
                });

            modelBuilder.Entity("Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HealthNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Bag-End, Underhill, Hobbiton",
                            DateOfBirth = new DateTime(2021, 6, 19, 14, 41, 29, 499, DateTimeKind.Local).AddTicks(1167),
                            HealthNumber = 111222333,
                            Name = "Baggins",
                            PhoneNumber = "+44 7911 123456"
                        },
                        new
                        {
                            Id = 2,
                            Address = "3 Bagshot Row, Hobbiton",
                            DateOfBirth = new DateTime(2021, 6, 19, 14, 41, 29, 499, DateTimeKind.Local).AddTicks(1212),
                            HealthNumber = 444555666,
                            Name = "Gamgee",
                            PhoneNumber = "+44 7911 123457"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Brandy Hall, Buckland",
                            DateOfBirth = new DateTime(2021, 6, 19, 14, 41, 29, 499, DateTimeKind.Local).AddTicks(1215),
                            HealthNumber = 777888999,
                            Name = "Brandybuck",
                            PhoneNumber = "+44 7911 123458"
                        });
                });

            modelBuilder.Entity("IntakeForm", b =>
                {
                    b.HasOne("Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
